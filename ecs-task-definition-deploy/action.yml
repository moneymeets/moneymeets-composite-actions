name: Create task definition revision
description: Use image_uri to create new task definition revision, and deregister previous active task definition

inputs:
  application_id:
    description: Application ID also the task definition name in this case
    required: true
  image_uri:
    description: The URI of the container image to insert into the ECS task definition
    required: true

  aws_access_key_id:
    description: AWS access key
    required: true
  aws_secret_access_key:
    description: AWS secret access key
    required: true
  aws_region:
    description: AWS region
    required: false
    default: eu-central-1

outputs:
  previous-task-definition-arn:
    description: "ARN of previous task definition revision"
    value: ${{ steps.get-github-action-task-definition-arn.outputs.task-definition-arn }}
  latest-task-definition-arn:
    description: "ARN of new task definition revision"
    value: ${{ steps.deploy-task-definition.outputs.task-definition-arn }}

runs:
  using: composite
  steps:
    - id: configure-aws-credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ inputs.aws_region }}

    - name: Setup Python + Poetry
      uses: moneymeets/action-setup-python-poetry@master
      with:
        working_directory: ${{ github.action_path }}
        # ToDo: Re-enable cache when https://github.com/actions/setup-python/issues/361 is fixed
        poetry_cache_enabled: 'false'

    - name: Get latest active task definition revision created by Pulumi
      id: get-pulumi-task-definition-arn
      shell: bash
      env:
        APPLICATION_ID: ${{ inputs.application_id }}
      run: |
        TASK_DEFINITION_ARN=$(
          poetry run --directory ${{ github.action_path }} actions_helper get-active-task-definition-arn-by-tag \
            --application-id "$APPLICATION_ID" \
            --tags "created_by:Pulumi, Name:$APPLICATION_ID"
        )
        echo "task-definition-arn=${TASK_DEFINITION_ARN}" >> $GITHUB_OUTPUT

    - name: Download and check task definition
      shell: bash
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ steps.get-pulumi-task-definition-arn.outputs.task-definition-arn }} \
          --query taskDefinition \
          --region ${{ inputs.aws_region }} \
        > task-definition.json

        result=$(jq '.' task-definition.json | jq '.containerDefinitions[].image | select(. != "PLACEHOLDER")')
        if [ "$result" ]; then
            echo "Error: Not all values for containerDefinitions 'image' equal to 'PLACEHOLDER'"
            exit 1
        fi

    - name: Replace PLACEHOLDER in task definition with image URI
      shell: bash
      run: |
        jq --arg image_uri "${{ inputs.image_uri }}" '.containerDefinitions[].image |= $image_uri' \
          task-definition.json > tmpfile && mv tmpfile task-definition.json
    
    - name: Get latest active task definition created by GitHub Actions Deployment
      id: get-github-action-task-definition-arn
      shell: bash
      env:
        APPLICATION_ID: ${{ inputs.application_id }}
      run: |
        TASK_DEFINITION_ARN=$(
          poetry run --directory ${{ github.action_path }} actions_helper get-active-task-definition-arn-by-tag \
            --application-id "$APPLICATION_ID" \
            --tags "created_by:GitHub Actions Deployment, Name:$APPLICATION_ID" \
            --allow-empty
        )
        echo "task-definition-arn=${TASK_DEFINITION_ARN}" >> $GITHUB_OUTPUT

    - uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      id: deploy-task-definition
      with:
        task-definition: task-definition.json

    - name: Add tags to the new task definition revision
      shell: bash
      run: |
        aws ecs tag-resource \
          --resource-arn ${{ steps.deploy-task-definition.outputs.task-definition-arn }} \
          --tags key=created_by,value='GitHub Actions Deployment' key=Name,value=${{ inputs.application_id }} \
          --region ${{ inputs.aws_region }}
